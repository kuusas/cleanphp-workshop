# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/App/*'
        exclude: '../src/App/{Entity,Migrations,Tests,Kernel.php}'

    Model\:
        resource: '../src/Model/*'
        exclude: '../src/Model/{Entity}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/App/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    # App\Command\AppWeatherCommand:
    #     arguments:
    #         $cacheDir: "%kernel.cache_dir%"

    Model\Provider\ProviderInterface:
        alias: Model\Provider\Apixu

    Model\HttpClientInterface:
        alias: App\Http\Client

    Model\Provider\ProviderRegistry:
        calls:
            - method: add
              arguments:
                - '@Model\Provider\Apixu'
            - method: add
              arguments:
                - '@Model\Provider\OpenWeatherMap'
            - method: add
              arguments:
                - '@Model\Provider\Yahoo'

    League\Tactician\CommandBus:
        alias: tactician.commandbus

    Model\Weather\GetWeatherHandler:
        tags:
            - { name: tactician.handler, typehints: true }

    Model\Location\CreateLocationHandler:
        tags:
            - { name: tactician.handler, typehints: true }

    Model\Location\ToggleLocationHandler:
        tags:
            - { name: tactician.handler, typehints: true }